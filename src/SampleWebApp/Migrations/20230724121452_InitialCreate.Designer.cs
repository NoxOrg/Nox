// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleWebApp.Infrastructure.Persistence;

#nullable disable

namespace SampleWebApp.Migrations
{
    [DbContext(typeof(SampleWebAppDbContext))]
    [Migration("20230724121452_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CountryCurrency", b =>
                {
                    b.Property<string>("CountriesId")
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("CurrenciesId")
                        .HasColumnType("CHAR(3)");

                    b.HasKey("CountriesId", "CurrenciesId");

                    b.HasIndex("CurrenciesId");

                    b.ToTable("CountryCurrency");
                });

            modelBuilder.Entity("SampleWebApp.Domain.Country", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("AlphaCode2")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("AlphaCode3")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("CHAR(3)");

                    b.Property<decimal>("AreaInSquareKilometres")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Capital")
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR(63)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Demonym")
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR(63)");

                    b.Property<string>("DialingCodes")
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(31)");

                    b.Property<string>("FormalName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR(63)");

                    b.Property<string>("GeoRegion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(8)");

                    b.Property<string>("GeoSubRegion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("GeoWorldRegion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR(63)");

                    b.Property<short>("NumericCode")
                        .HasColumnType("smallint");

                    b.Property<int?>("Population")
                        .HasColumnType("int");

                    b.Property<string>("TopLevelDomains")
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR(31)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SampleWebApp.Domain.CountryLocalNames", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("CountryId")
                        .HasColumnType("CHAR(2)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryLocalNames");
                });

            modelBuilder.Entity("SampleWebApp.Domain.Currency", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR(63)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SampleWebApp.Domain.Store", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR(63)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("CountryCurrency", b =>
                {
                    b.HasOne("SampleWebApp.Domain.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleWebApp.Domain.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SampleWebApp.Domain.CountryLocalNames", b =>
                {
                    b.HasOne("SampleWebApp.Domain.Country", null)
                        .WithMany("CountryLocalNames")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("SampleWebApp.Domain.Store", b =>
                {
                    b.OwnsOne("Nox.Types.Money", "PhysicalMoney", b1 =>
                        {
                            b1.Property<string>("StoreId")
                                .HasColumnType("CHAR(3)");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15, 5)");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StoreId");

                            b1.ToTable("Stores");

                            b1.WithOwner()
                                .HasForeignKey("StoreId");
                        });

                    b.Navigation("PhysicalMoney")
                        .IsRequired();
                });

            modelBuilder.Entity("SampleWebApp.Domain.Country", b =>
                {
                    b.Navigation("CountryLocalNames");
                });
#pragma warning restore 612, 618
        }
    }
}
