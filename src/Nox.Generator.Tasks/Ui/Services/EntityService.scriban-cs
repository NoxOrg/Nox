// Generated

#nullable enable

using Nox.Extensions;
using Nox.Ui.Blazor.Lib.Contracts;

using {{codeGenConventions.DtoNameSpace}};
using {{codeGenConventions.UiNameSpace}}.Models;

namespace {{codeGenConventions.UiNameSpace}}.Services;

public interface I{{className}}
{
    public Task<List<{{entity.Name}}Model>> GetAllAsync();
    public Task<{{entity.Name}}Model?> GetByIdAsync(string id);
    public Task<{{entity.Name}}Model?> CreateAsync({{entity.Name}}Model {{ToLowerFirstChar entity.Name}});
    public Task<{{entity.Name}}Model?> UpdateAsync({{entity.Name}}Model {{ToLowerFirstChar entity.Name}});
    public Task DeleteAsync({{entity.Name}}Model {{ToLowerFirstChar entity.Name}});
}

internal partial class {{className}} : {{className}}Base
{
    public {{className}}(HttpClient httpClient, 
        IEndpointsProvider endpointsProvider,
        IModelConverter<{{entity.Name}}Model, {{entity.Name}}Dto> dtoConverter,
        IModelConverter<{{entity.Name}}Model, {{entity.Name}}CreateDto> createDtoConverter,
        IModelConverter<{{entity.Name}}Model, {{entity.Name}}UpdateDto> updateDtoConverter)
        : base(httpClient, endpointsProvider, dtoConverter, createDtoConverter, updateDtoConverter)
    {
    }
}

internal abstract partial class {{className}}Base : I{{className}}
{
    private readonly HttpClient _httpClient;
    private readonly string _apiBaseUrl;
    private readonly IModelConverter<{{entity.Name}}Model, {{entity.Name}}Dto> _dtoConverter;
    private readonly IModelConverter<{{entity.Name}}Model, {{entity.Name}}CreateDto> _createDtoConverter;
    private readonly IModelConverter<{{entity.Name}}Model, {{entity.Name}}UpdateDto> _updateDtoConverter;

    protected {{className}}Base(HttpClient httpClient, 
        IEndpointsProvider endpointsProvider,
        IModelConverter<{{entity.Name}}Model, {{entity.Name}}Dto> dtoConverter,
        IModelConverter<{{entity.Name}}Model, {{entity.Name}}CreateDto> createDtoConverter,
        IModelConverter<{{entity.Name}}Model, {{entity.Name}}UpdateDto> updateDtoConverter)
    {
        _httpClient = httpClient;
        _apiBaseUrl = endpointsProvider.{{entity.PluralName}}Url;
        _dtoConverter = dtoConverter;
        _createDtoConverter = createDtoConverter;
        _updateDtoConverter = updateDtoConverter;
    }

    public async Task<List<{{entity.Name}}Model>> GetAllAsync()
    {
        var items = await _httpClient.GetODataCollectionResponseAsync<List<{{entity.Name}}Dto>>(_apiBaseUrl);
        return items?.Select(i => _dtoConverter.ConvertToModel(i)).ToList() ?? new List<{{entity.Name}}Model>();
    }

    public async Task<{{entity.Name}}Model?> GetByIdAsync(string id)
    {
        var item = await _httpClient.GetODataSimpleResponseAsync<{{entity.Name}}Dto>($"{_apiBaseUrl}/{id}");
        return item != null ? _dtoConverter.ConvertToModel(item) : null;
    }

    public async Task<{{entity.Name}}Model?> CreateAsync({{entity.Name}}Model {{ToLowerFirstChar entity.Name}})
    {
        var item = await _httpClient.PostAsync<{{entity.Name}}CreateDto, {{entity.Name}}Dto>(_apiBaseUrl, _createDtoConverter.ConvertToDto({{ToLowerFirstChar entity.Name}}));
        return item != null ? _dtoConverter.ConvertToModel(item) : null;
    }

    public async Task<{{entity.Name}}Model?> UpdateAsync({{entity.Name}}Model {{ToLowerFirstChar entity.Name}})
    {
        if ({{ToLowerFirstChar entity.Name}}.Etag != Guid.Empty)
        {
            string currentEtag = {{ToLowerFirstChar entity.Name}}.Etag.ToString();

            Dictionary<string, IEnumerable<string>> headers = new()
            {
                { "If-Match", new List<string> { $"\"{currentEtag}\"" } }
            };
            _httpClient.DefaultRequestHeaders.Clear();
            foreach (var header in headers)
            {
                _httpClient.DefaultRequestHeaders.Add(header.Key, header.Value);
            }
        }

        string? currentID = string.Empty;
        if ({{ToLowerFirstChar entity.Name}}.Id != null)
        {
            currentID = {{ToLowerFirstChar entity.Name}}.Id.ToString();
        }

        var item = await _httpClient.PutAsync<{{entity.Name}}UpdateDto, {{entity.Name}}Dto>(_apiBaseUrl + $"/{currentID}", _updateDtoConverter.ConvertToDto({{ToLowerFirstChar entity.Name}}));

        return item != null ? _dtoConverter.ConvertToModel(item) : null;
    }

    public async Task DeleteAsync({{entity.Name}}Model {{ToLowerFirstChar entity.Name}})
    {
        if ({{ToLowerFirstChar entity.Name}}.Etag != Guid.Empty)
        {
            string currentEtag = {{ToLowerFirstChar entity.Name}}.Etag.ToString();

            Dictionary<string, IEnumerable<string>> headers = new()
            {
                { "If-Match", new List<string> { $"\"{currentEtag}\"" } }
            };
            _httpClient.DefaultRequestHeaders.Clear();
            foreach (var header in headers)
            {
                _httpClient.DefaultRequestHeaders.Add(header.Key, header.Value);
            }
        }

        string? currentID = string.Empty;
        if ({{ToLowerFirstChar entity.Name}}.Id != null)
        {
            currentID = {{ToLowerFirstChar entity.Name}}.Id.ToString();
        }

        await _httpClient.DeleteAsync($"{_apiBaseUrl}/{currentID}");
    }
}