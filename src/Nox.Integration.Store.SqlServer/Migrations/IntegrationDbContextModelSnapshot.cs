// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nox.Integration.Store;

#nullable disable

namespace Nox.Integration.Store.SqlServer.Migrations
{
    [DbContext(typeof(IntegrationDbContext))]
    partial class IntegrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Nox.Integration.Store.Integration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Integrations");
                });

            modelBuilder.Entity("Nox.Integration.Store.MergeAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Inserts")
                        .HasColumnType("int");

                    b.Property<int?>("IntegrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Unchanged")
                        .HasColumnType("int");

                    b.Property<int>("Updates")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationId");

                    b.ToTable("MergeAnalytics");
                });

            modelBuilder.Entity("Nox.Integration.Store.MergeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IntegrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDateLoadedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Updated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationId");

                    b.ToTable("MergeStates");
                });

            modelBuilder.Entity("Nox.Integration.Store.MergeAnalytic", b =>
                {
                    b.HasOne("Nox.Integration.Store.Integration", null)
                        .WithMany("MergeAnalytics")
                        .HasForeignKey("IntegrationId");
                });

            modelBuilder.Entity("Nox.Integration.Store.MergeState", b =>
                {
                    b.HasOne("Nox.Integration.Store.Integration", null)
                        .WithMany("MergeStates")
                        .HasForeignKey("IntegrationId");
                });

            modelBuilder.Entity("Nox.Integration.Store.Integration", b =>
                {
                    b.Navigation("MergeAnalytics");

                    b.Navigation("MergeStates");
                });
#pragma warning restore 612, 618
        }
    }
}
