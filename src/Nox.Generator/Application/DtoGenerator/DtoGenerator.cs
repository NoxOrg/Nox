using System.Collections.Generic;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Nox.Solution;

using static Nox.Generator._Common.BaseGenerator;

namespace Nox.Generator.Application.DtoGenerator;

public class DtoGenerator
{
    public static void Generate(SourceProductionContext context, string solutionNameSpace, NoxSolution solution)
    {
        context.CancellationToken.ThrowIfCancellationRequested();

        if (solution.Application == null || solution.Application.DataTransferObjects == null) return;

        foreach (var dto in solution.Application.DataTransferObjects)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            GenerateDto(context, solutionNameSpace, dto);
        }
    }

    public static void GenerateDto(SourceProductionContext context, string solutionNameSpace, string name, string description, IReadOnlyList<NoxSimpleTypeDefinition> attributes)
    {
        var code = new CodeBuilder($"Application/DataTransferObjects/{name}.g.cs", context);

        code.AppendLine($"// Generated by {nameof(DtoGenerator)}::{MethodBase.GetCurrentMethod()!.Name}");
        code.AppendLine();
        code.AppendLine($"using Nox.Core.Interfaces.Entity;");
        code.AppendLine($"using Nox.Types;");
        code.AppendLine($"using System.Collections.Generic;");
        code.AppendLine();
        code.AppendLine($"namespace {solutionNameSpace}.Application.DataTransferObjects;");

        GenerateDocs(code, description);

        code.AppendLine($"public partial class {name} : IDynamicDto");
        code.StartBlock();

        GenerateProperties(context, code, attributes);

        code.EndBlock();

        code.GenerateSourceCode();
    }

    private static void GenerateDto(SourceProductionContext context, string solutionNameSpace, DataTransferObject dto)
    {
        GenerateDto(context, solutionNameSpace, dto.Name, dto.Description, dto.Attributes);
    } 
    
    private static void GenerateProperties(SourceProductionContext context, CodeBuilder code, IReadOnlyList<NoxSimpleTypeDefinition> attributes)
    {
        foreach (var attribute in attributes)
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            GenerateDocs(code, attribute.Description);

            var propType = attribute.Type;
            var propName = attribute.Name;
            var nullable = attribute.IsRequired ? string.Empty : "?";

            code.AppendLine($"public {propType}{nullable} {propName} {{ get; set; }} = null!;");
        }
    }
}