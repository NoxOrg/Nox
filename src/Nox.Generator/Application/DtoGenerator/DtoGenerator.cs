using Microsoft.CodeAnalysis;
using Nox.Solution;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Nox.Generator.Common;
using static Nox.Generator.Common.BaseGenerator;

namespace Nox.Generator.Application.DtoGenerator;

public class DtoGenerator
{
    public static void Generate(SourceProductionContext context, string solutionNameSpace, NoxSolution solution)
    {
        context.CancellationToken.ThrowIfCancellationRequested();

        if (solution.Application?.DataTransferObjects == null) return;

        foreach (var dto in solution.Application.DataTransferObjects)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            GenerateDto(context, solutionNameSpace, dto);
        }
    }

    public static void GenerateDto(SourceProductionContext context, string solutionNameSpace, string name, string? description, IReadOnlyList<NoxSimpleTypeDefinition> attributes)
    {
        var code = new CodeBuilder($"{name}.g.cs", context);

        code.AppendLine($"// Generated by {nameof(DtoGenerator)}::{MethodBase.GetCurrentMethod()!.Name}");
        code.AppendLine();
        //NOTE: this must point to the Nox abstractions
        code.AppendLine($"using Nox.Abstractions;");
        code.AppendLine($"using Nox.Types;");
        code.AppendLine($"using System.Collections.Generic;");
        code.AppendLine();
        code.AppendLine($"namespace {solutionNameSpace}.Application.DataTransferObjects;");
        code.AppendLine();

        GenerateDocs(code, description);

        code.AppendLine($"public partial class {name} : IDynamicDto");
        code.StartBlock();

        GenerateProperties(context, code, attributes);

        code.EndBlock();
        
        code.GenerateSourceCode();
    }
    

    private static void GenerateDto(SourceProductionContext context, string solutionNameSpace, DataTransferObject dto)
    {
        var className = dto.Name.EnsureEndsWith("Dto");
        var code = new CodeBuilder($"{dto.Name}.g.cs", context);

        code.AppendLine($"// Generated by {nameof(DtoGenerator)}::{MethodBase.GetCurrentMethod()!.Name}");
        code.AppendLine();
        //NOTE: this must point to the Nox abstractions
        code.AppendLine($"using Nox.Abstractions;");
        code.AppendLine($"using Nox.Types;");
        code.AppendLine($"using System.Collections.Generic;");
        code.AppendLine();
        code.AppendLine($"namespace {solutionNameSpace}.Application.DataTransferObjects;");

        GenerateDocs(code, dto.Description ?? "It's good practice to give a proper description of your dto's");

        code.AppendLine($"public partial class {className} : IDynamicDto");
        code.StartBlock();

        GenerateProperties(context, code, dto.Attributes);

        code.EndBlock();
        
        code.GenerateSourceCode();
    }
    
    private static void GenerateProperties(SourceProductionContext context, CodeBuilder code, IEnumerable<NoxSimpleTypeDefinition> attributes)
    {
        var attributesList = attributes.ToList();
        for (int i = 0; i < attributesList.Count; i++)
        {
            var attribute = attributesList[i];
            context.CancellationToken.ThrowIfCancellationRequested();

            GeneratePropertyDocs(context, code, attribute);

            var propType = attribute.Type;
            var propName = attribute.Name;
            var nullable = attribute.IsRequired ? string.Empty : "?";

            code.AppendLine($"public {propType}{nullable} {propName} {{ get; set; }} = null!;");
            
            if (i != attributesList.Count - 1)
            {
                code.AppendLine();
            }
        }
    }
    
    private static void GeneratePropertyDocs(SourceProductionContext context, CodeBuilder code, NoxSimpleTypeDefinition prop)
    {
        if (!string.IsNullOrWhiteSpace(prop.Description))
        {
            code.AppendLine($"/// <summary>");
            code.AppendLine($"/// {prop.Description!.TrimEnd('.')}.");
            code.AppendLine($"/// </summary>"); 
        }
    }
}