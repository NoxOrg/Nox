using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Nox.Solution;
using Nox.Solution.Events;

namespace Nox.Generator.Domain.DomainEventGenerator;

public class DomainEventGenerator
{
    public static void Generate(SourceProductionContext context, string solutionNameSpace, DomainEvent evt)
    {
        var code = new CodeBuilder();

        code.AppendLine($"// Generated by {nameof(DomainEventGenerator)}::{MethodBase.GetCurrentMethod()!.Name}");
        code.AppendLine();
        code.AppendLine($"using Nox.Core.Interfaces.Messaging.Events;");
        code.AppendLine($"using Nox.Types;");
        code.AppendLine();
        code.AppendLine($"namespace {solutionNameSpace}.Domain;");

        GenerateClassDocs(context, code, evt);

        code.AppendLine($"public partial class {evt.Name} : INoxEvent");
        code.StartBlock();

        GenerateProperties(context, code, evt);

        code.EndBlock();
        
        context.AddSource($"{evt.Name}.cs", SourceText.From(code.ToString(), Encoding.UTF8));
    }
    
    private static void GenerateClassDocs(SourceProductionContext context, CodeBuilder code, DomainEvent evt)
    {
        if (evt.Description is not null)
        {
            code.AppendLine();
            code.AppendLine($"/// <summary>");
            code.AppendLine($"/// {evt.Description.EnsureEndsWith('.')}");
            code.AppendLine($"/// </summary>");
        }
    }
    
    private static void GenerateProperties(SourceProductionContext context, CodeBuilder code, DomainEvent evt)
    {
        if (evt.ObjectTypeOptions != null)
        {
            foreach (var attribute in evt.ObjectTypeOptions.Attributes)
            {
                context.CancellationToken.ThrowIfCancellationRequested();
        
                GeneratePropertyDocs(context, code, attribute);
        
                var propType = attribute.Type;
                var propName = attribute.Name;
                var nullable = attribute.IsRequired ? string.Empty : "?";
        
                code.AppendLine($"public {propType}{nullable} {propName} {{ get; set; }} = null!;");
            }
        }
    }
    
    private static void GeneratePropertyDocs(SourceProductionContext context, CodeBuilder code, NoxSimpleTypeDefinition prop)
    {
        if (!string.IsNullOrWhiteSpace(prop.Description))
        {
            code.AppendLine();
            code.AppendLine($"/// <summary>");
            code.AppendLine($"/// {prop.Description!.TrimEnd('.')}.");
            code.AppendLine($"/// </summary>"); 
        }
    }
}