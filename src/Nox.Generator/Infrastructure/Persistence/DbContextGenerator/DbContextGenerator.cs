using Humanizer;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Nox.Solution;
using Nox.Types;
using System;
using System.Data.SqlTypes;
using System.Text;
using System.Threading;

namespace Nox.Generator;

internal class DbContextGenerator
{
    public static void Generate(SourceProductionContext context, string solutionNameSpace, NoxSolution solution)
    {
        var code = new CodeBuilder();

        typeof(DbContextGenerator).ToString();

        code.AppendLine($"// Generated by ");
        code.AppendLine();
        code.AppendLine(@"using Microsoft.EntityFrameworkCore;");
        code.AppendLine(@"using Microsoft.EntityFrameworkCore.Design;");
        code.AppendLine($"using {solutionNameSpace}.Domain;");
        code.AppendLine();
        code.AppendLine($"namespace {solutionNameSpace}.Infrastructure.Persistence;");
        code.AppendLine();
        code.AppendLine();
        code.AppendLine($"/// <summary>");
        code.AppendLine($"/// ???.");
        code.AppendLine($"/// </summary>");
        code.AppendLine($"public partial class {solution.Name}DbContext : DbContext");

        code.StartBlock();

        code.AppendLine($"/// <summary>");
        code.AppendLine($"/// The state of the entity as at this date.");
        code.AppendLine($"/// </summary>");
        code.AppendLine($"public DateTime AsAt {{get; set;}}");

        code.EndBlock();



        //// Dynamic DB context
        //sb.AppendLine(@"/// <summary>");
        //sb.AppendLine(@"/// Dynamic DB Context for OData endpoints");
        //sb.AppendLine(@"/// </summary>");
        //sb.AppendLine($@"public class NoxDbContext : DynamicDbContext");
        //sb.AppendLine(@"{");
        //sb.AppendLine(@"    public NoxDbContext(");
        //sb.AppendLine(@"        DbContextOptions<DynamicDbContext> options,");
        //sb.AppendLine(@"        IDynamicModel dynamicDbModel");
        //sb.AppendLine(@"    )");
        //sb.AppendLine(@"    : base(options, dynamicDbModel) { }");
        //sb.AppendLine(@"");
        //sb.AppendLine(@"}");
        //sb.AppendLine(@"");

        //// Strongly typed DbContext for Queries / Commands
        //sb.AppendLine(@"/// <summary>");
        //sb.AppendLine(@"/// Strongly typed DbContext for Queries / Commands / Custom code");
        //sb.AppendLine(@"/// </summary>");
        //sb.AppendLine($@"public class NoxDomainDbContext : DbContext, IDynamicNoxDomainDbContext");
        //sb.AppendLine(@"{");
        //sb.AppendLine(@"    // Dynamic model is needed to access the Data Provider");
        //sb.AppendLine(@"    private readonly IDynamicModel _dynamicDbModel;");
        //sb.AppendLine(@"");
        //// Generate strongly typed DbSets for each aggreagate root or independent entity
        //foreach (var setEntity in entities)
        //{
        //    sb.AppendLine($@"    public DbSet<{setEntity.Name}> {setEntity.Name} {{ get; set; }}");
        //    sb.AppendLine(@"");
        //}
        //sb.AppendLine(@"    public NoxDomainDbContext(");
        //sb.AppendLine(@"        DbContextOptions<NoxDomainDbContext> options,");
        //sb.AppendLine(@"        IDynamicModel dynamicDbModel");
        //sb.AppendLine(@"    )");
        //sb.AppendLine(@"    : base(options)");
        //sb.AppendLine(@"    {");
        //sb.AppendLine(@"        _dynamicDbModel = dynamicDbModel;");
        //sb.AppendLine(@"    }");
        //sb.AppendLine(@"");
        //// Generate a method to register this DbContext implementation in the IoC container
        //sb.AppendLine(@"    public static void RegisterContext(IServiceCollection services)");
        //sb.AppendLine(@"    {");
        //sb.AppendLine(@"        services.AddDbContext<NoxDomainDbContext>();");
        //sb.AppendLine(@"    }");
        //sb.AppendLine(@"");
        //sb.AppendLine(@"    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)");
        //sb.AppendLine(@"    {");
        //sb.AppendLine(@"        var provider = _dynamicDbModel.GetDatabaseProvider();");
        //sb.AppendLine(@"        provider.ConfigureDbContext(optionsBuilder);");
        //sb.AppendLine(@"    }");
        //sb.AppendLine(@"");
        //sb.AppendLine(@"    protected override void OnModelCreating(ModelBuilder modelBuilder)");
        //sb.AppendLine(@"    {");
        //// Set up composite keys
        //foreach (var entity in entities.Where(e => e.Keys != null && e.Keys.Count > 1))
        //{
        //    // TODO: verify the logic whith Key.Name/Entity
        //    sb.AppendLine($@"        modelBuilder.Entity<{entity.Name}>().HasKey(new [] {{ ""{string.Join(@""", """, entity.Keys.Select(k => $"{k.Name}Id"))}"" }});");
        //}
        //sb.AppendLine(@"        base.OnModelCreating(modelBuilder);");
        //sb.AppendLine(@"    }");
        //sb.AppendLine(@"}");
        //sb.AppendLine(@"");

        //// Add for MySql compatibility
        //sb.AppendLine(@"// https://www.svrz.com/unable-to-resolve-service-for-type-microsoft-entityframeworkcore-storage-typemappingsourcedependencies/");
        //sb.AppendLine(@"");
        //sb.AppendLine(@"public class MysqlEntityFrameworkDesignTimeServices : IDesignTimeServices");
        //sb.AppendLine(@"{");
        //sb.AppendLine(@"    public void ConfigureDesignTimeServices(IServiceCollection serviceCollection)");
        //sb.AppendLine(@"    {");
        //sb.AppendLine(@"        serviceCollection.AddEntityFrameworkMySQL();");
        //sb.AppendLine(@"        new EntityFrameworkRelationalDesignServicesBuilder(serviceCollection)");
        //sb.AppendLine(@"            .TryAddCoreServices();");
        //sb.AppendLine(@"    }");
        //sb.AppendLine(@"}");

        //GenerateFile(sb, "NoxDbContext");

        context.AddSource($"DbContext.cs", SourceText.From(code.ToString(), Encoding.UTF8));
    }
}
