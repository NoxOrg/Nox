@using Cryptocash.Ui.Generated.Component;
@inherits UiEditGoogleMapBase

<script>
    var oldMarker, dotNetHelper;
    var defaultLat;
    var defaultLng;
    var addDefaultMarker = false;

    function updateDefaultLatLong(lat, lng, defaultMarker){
        defaultLat = lat;
        defaultLng = lng;
        addDefaultMarker = defaultMarker;
    }

    function initMap() {
        const myLatlng = { lat: defaultLat, lng: defaultLng };
        const map = new google.maps.Map(document.getElementById("map"), {
            zoom: 4,
            center: myLatlng,
        });

        if (addDefaultMarker == true) {
            addDefaultMarker = false;
            placeMarker(myLatlng);
        }

        map.addListener("click", (mapsMouseEvent) => {

            placeMarker(mapsMouseEvent.latLng);        

            PlaceMarkerCallbackHelpers.performPlaceMarker(mapsMouseEvent.latLng.lat(), mapsMouseEvent.latLng.lng());

        });

        function placeMarker(location) {

            marker = new google.maps.Marker({
                position: location,
                map,
                title: "",
            });

            if (oldMarker != undefined) {
                oldMarker.setMap(null);
            }
            oldMarker = marker;
            map.setCenter(location);

        }
    }  
    
    class PlaceMarkerCallbackHelpers {
        static dotNetHelper;

        static setDotNetHelper(value) {
            PlaceMarkerCallbackHelpers.dotNetHelper = value;
        }

        static async performPlaceMarker(lat, long) {
            await PlaceMarkerCallbackHelpers.dotNetHelper.invokeMethodAsync('UpdateLatlong', lat, long);
        }
    }

    window.PlaceMarkerCallbackHelpers = PlaceMarkerCallbackHelpers;

</script>   

<style>
    #map {
        overflow: hidden;
        background: none !important;
        overflow: hidden;
        padding-bottom: 56.25%;
        position: relative;
        height: 0;
    }
</style> 

<div id="map"></div>