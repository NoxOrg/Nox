// Generated

using Cryptocash.Application.Dto;
using Cryptocash.Ui.Generated.Data.ApiSetting;
using Cryptocash.Ui.Generated.Data.Enum;

namespace Cryptocash.Ui.Generated.Data.Generic.Service;

/// <summary>
/// Bespoke Class generated by Nox.Generator used to define ApiUiService and Get Api results
/// </summary>
public class BookingService : IEntityService
{
    /// <summary>
    /// Bespoke Class generated by Nox.Generator used to define ApiUiService which defines URL access and Search Filter, View, Order, Paging and Action settings
    /// </summary>
    public ApiUiService IntialiseApiUiService()
    {
        throw new NotImplementedException();
    }

    public static BookingCreateDto ConvertBookingIntoCreateDto(BookingDto currentDto)
    {
        if (currentDto != null)
        {
            BookingCreateDto rtnDto = new BookingCreateDto();
            rtnDto.Id = currentDto.Id;
            rtnDto.AmountFrom = currentDto.AmountFrom;
            rtnDto.AmountTo = currentDto.AmountTo;
            rtnDto.RequestedPickUpDate = currentDto.RequestedPickUpDate;
            rtnDto.PickedUpDateTime = currentDto.PickedUpDateTime;
            rtnDto.ExpiryDateTime = currentDto.ExpiryDateTime;
            rtnDto.CancelledDateTime = currentDto.CancelledDateTime;
            rtnDto.Status = currentDto.Status;
            rtnDto.VatNumber = currentDto.VatNumber;
            rtnDto.BookingForCustomer = CustomerService.ConvertCustomerIntoCreateDto(currentDto.BookingForCustomer);
            rtnDto.BookingRelatedVendingMachine = VendingMachineService.ConvertVendingMachineIntoCreateDto(currentDto.BookingRelatedVendingMachine);
            rtnDto.BookingFeesForCommission = CommissionService.ConvertCommissionIntoCreateDto(currentDto.BookingFeesForCommission);
            rtnDto.BookingRelatedTransaction = TransactionService.ConvertTransactionIntoCreateDto(currentDto.BookingRelatedTransaction);

            return rtnDto;
        }

        return null;
    }

    public static List<BookingCreateDto> ConvertBookingIntoCreateDtoList(List<BookingDto> currentDtoList)
    {
        if (currentDtoList != null)
        {
            List<BookingCreateDto> rtnDto = new List<BookingCreateDto>();

            foreach (BookingDto currentDto in currentDtoList)
            {
                rtnDto.Add(ConvertBookingIntoCreateDto(currentDto));
            }

            return rtnDto;
        }

        return null;
    }
}
