// Generated

using Cryptocash.Application.Dto;
using Cryptocash.Ui.Generated.Data.ApiSetting;

namespace Cryptocash.Ui.Generated.Data.Generic.Service;

/// <summary>
/// Bespoke Class generated by Nox.Generator used to define ApiUiService and Get Api results
/// </summary>
public class CustomerService : IEntityService
{
    /// <summary>
    /// Bespoke Class generated by Nox.Generator used to define ApiUiService which defines URL access and Search Filter, View, Order, Paging and Action settings
    /// </summary>
    public ApiUiService IntialiseApiUiService()
    {
        ApiUiService rtnApiUiService = new();

        rtnApiUiService.Url = "https://localhost:44310/api/Customers";

        rtnApiUiService.Paging = new Paging()
        {
            CurrentPage = 0,
            CurrentPageSize = 5,
            EntityTotal = 0,
            PageSizeList = new List<int> {
                3,
                5,
                10,
                20
            }
        };

        return rtnApiUiService;
    }

    public static CustomerCreateDto ConvertCustomerIntoCreateDto(CustomerDto currentDto)
    {
        if (currentDto != null)
        {
            CustomerCreateDto rtnDto = new CustomerCreateDto();
            rtnDto.FirstName = currentDto.FirstName;
            rtnDto.LastName = currentDto.LastName;
            rtnDto.EmailAddress = currentDto.EmailAddress;
            rtnDto.Address = currentDto.Address;
            rtnDto.MobileNumber = currentDto.MobileNumber;
            rtnDto.CustomerRelatedPaymentDetails = PaymentDetailService.ConvertPaymentDetailIntoCreateDtoList(currentDto.CustomerRelatedPaymentDetails);
            rtnDto.CustomerRelatedBookings = BookingService.ConvertBookingIntoCreateDtoList(currentDto.CustomerRelatedBookings);
            rtnDto.CustomerRelatedTransactions = TransactionService.ConvertTransactionIntoCreateDtoList(currentDto.CustomerRelatedTransactions);
            rtnDto.CustomerBaseCountry = CountryService.ConvertCountryIntoCreateDto(currentDto.CustomerBaseCountry);

            return rtnDto;
        }

        return null;
    }

    public static List<CustomerCreateDto> ConvertCustomerIntoCreateDtoList(List<CustomerDto> currentDtoList)
    {
        if (currentDtoList != null)
        {
            List<CustomerCreateDto> rtnDto = new List<CustomerCreateDto>();

            foreach (CustomerDto currentDto in currentDtoList)
            {
                rtnDto.Add(ConvertCustomerIntoCreateDto(currentDto));
            }

            return rtnDto;
        }

        return null;
    }
}
