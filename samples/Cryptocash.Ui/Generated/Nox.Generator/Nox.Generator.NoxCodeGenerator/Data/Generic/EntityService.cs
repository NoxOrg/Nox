using System.Text.Json;
using System.Text.Json.Serialization;

namespace Cryptocash.Ui.Generated.Data.Generic
{

    /// <summary>
    /// Bespoke Class generated by Nox.Generator used to define ApiUiService and Get Api results
    /// </summary>
    public static class EntityDataService<T>
    {
        /// <summary>
        /// Method used to Get Api results
        /// </summary>
        /// <param name="ApiUiService"></param>
        /// <returns>Task<EntityData?></returns>
        public static async Task<EntityData<T>?> GetAsyncEntityData(ApiUiService? ApiUiService)
        {
            await Task.Delay(100); //deliberate for UI to avoid flicker

            var jsonOptions = new JsonSerializerOptions();
            jsonOptions.Converters.Add(new JsonStringEnumConverter());

            EntityData<T>? Entities = JsonSerializer.Deserialize<EntityData<T>>(await ApiDataService.ReadAsyncApi(ApiUiService), jsonOptions);

            return Entities;
        }

        /// <summary>
        /// Method used to Get All Api results using recursive paged calls to Api
        /// </summary>
        /// <param name="ApiUiService"></param>
        /// <returns>Task<EntityData?></returns>
        public static async Task<EntityData<T>?> GetAsyncRecursivePagedEntityData(ApiUiService? ApiUiService)
        {
            if (ApiUiService == null || string.IsNullOrWhiteSpace(ApiUiService.Url) || ApiUiService.Paging == null)
            {
                throw new ArgumentException("EntityDataService.GetAsyncRecursivePagedEntityData: Malformed Input", nameof(ApiUiService));
            }

            EntityData<T>? rtnEntities = null;

            var jsonOptions = new JsonSerializerOptions();
            jsonOptions.Converters.Add(new JsonStringEnumConverter());

            bool Fresh = true;
            int CurrentPageNumber = 0;
            int CurrentTotal = 0;
            int OverallTotal = 0;

            while (Fresh || OverallTotal > CurrentTotal)
            {
                ApiUiService!.Paging!.CurrentPage = CurrentPageNumber;

                EntityData<T>? currentEntities = JsonSerializer.Deserialize<EntityData<T>>(await ApiDataService.ReadAsyncApi(ApiUiService), jsonOptions);

                if (Fresh && currentEntities != null)
                {
                    OverallTotal = currentEntities.EntityTotal;
                    rtnEntities = new()
                    {
                        EntityTotal = OverallTotal,
                        EntityList = []
                    };
                }

                if (currentEntities != null && currentEntities.EntityList != null)
                {
                    CurrentTotal = currentEntities.EntityList.Count;
                    if (CurrentTotal > 0)
                    {
                        rtnEntities!.EntityList!.AddRange(currentEntities.EntityList);
                    }
                }
                else
                {
                    CurrentTotal = 0;
                }                

                if (CurrentTotal == 0)
                {
                    break;
                }

                CurrentPageNumber += 1;
                Fresh = false;
            }

            return rtnEntities;
        }

        /// <summary>
        /// Method used to create ApiEntity
        /// </summary>
        /// <param name="ApiUiService"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static async Task CreateAsyncEntityData(ApiUiService? ApiUiService)
        {
            if (ApiUiService == null
                || string.IsNullOrWhiteSpace(ApiUiService.Url)
                || string.IsNullOrWhiteSpace(ApiUiService.ApiCreateData)
                )
            {
                throw new ArgumentException("EntityDataService.CreateAsyncEntityData: Malformed Input", nameof(ApiUiService));
            }
            await ApiDataService.PostAsyncApi(ApiUiService);
        }

        /// <summary>
        /// Method used to edit ApiEntity
        /// </summary>
        /// <param name="AddEntity"></param>
        /// <param name="ApiUiService"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static async Task EditAsyncEntityData(ApiUiService? ApiUiService)
        {
            if (ApiUiService == null
                || string.IsNullOrWhiteSpace(ApiUiService.ApiEditId)
                || string.IsNullOrWhiteSpace(ApiUiService.ApiEditData)
                || string.IsNullOrWhiteSpace(ApiUiService.ApiEditQuery)
                )
            {
                throw new ArgumentException("EntityDataService.EditAsyncEntityData: Malformed Input", nameof(ApiUiService));
            }
            await ApiDataService.PutAsyncApi(ApiUiService);
        }

        /// <summary>
        /// Method to delete entity
        /// </summary>
        /// <param name="ApiUiService"></param>
        /// <returns>Task<string></returns>
        public static async Task DeleteAsyncEntityData(ApiUiService? ApiUiService)
        {
            await ApiDataService.DeleteAsyncApi(ApiUiService);
        }
    }
}