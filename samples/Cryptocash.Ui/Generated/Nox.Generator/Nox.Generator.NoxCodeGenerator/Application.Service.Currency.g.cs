// Generated

using Cryptocash.Application.Dto;
using Cryptocash.Ui.Generated.Data.ApiSetting;
using Cryptocash.Ui.Generated.Data.Enum;

namespace Cryptocash.Ui.Generated.Data.Generic.Service;

/// <summary>
/// Bespoke Class generated by Nox.Generator used to define ApiUiService and Get Api results
/// </summary>
public class CurrencyService : IEntityService
{
    /// <summary>
    /// Bespoke Class generated by Nox.Generator used to define ApiUiService which defines URL access and Search Filter, View, Order, Paging and Action settings
    /// </summary>
    public ApiUiService IntialiseApiUiService()
    {
        throw new NotImplementedException();
    }

    public static CurrencyCreateDto ConvertCurrencyIntoCreateDto(CurrencyDto currentDto)
    {
        if (currentDto != null)
        {
            CurrencyCreateDto rtnDto = new CurrencyCreateDto();
            rtnDto.Id = currentDto.Id;
            rtnDto.Name = currentDto.Name;
            rtnDto.CurrencyIsoNumeric = currentDto.CurrencyIsoNumeric;
            rtnDto.Symbol = currentDto.Symbol;
            rtnDto.ThousandsSeparator = currentDto.ThousandsSeparator;
            rtnDto.DecimalSeparator = currentDto.DecimalSeparator;
            rtnDto.SpaceBetweenAmountAndSymbol = currentDto.SpaceBetweenAmountAndSymbol;
            rtnDto.DecimalDigits = currentDto.DecimalDigits;
            rtnDto.MajorName = currentDto.MajorName;
            rtnDto.MajorSymbol = currentDto.MajorSymbol;
            rtnDto.MinorName = currentDto.MinorName;
            rtnDto.MinorSymbol = currentDto.MinorSymbol;
            rtnDto.MinorToMajorValue = currentDto.MinorToMajorValue;
            rtnDto.CurrencyUsedByCountry = CountryService.ConvertCountryIntoCreateDtoList(currentDto.CurrencyUsedByCountry);
            rtnDto.CurrencyUsedByMinimumCashStocks = MinimumCashStockService.ConvertMinimumCashStockIntoCreateDtoList(currentDto.CurrencyUsedByMinimumCashStocks);
            rtnDto.CurrencyCommonBankNotes = BankNoteService.ConvertBankNoteIntoCreateDtoList(currentDto.CurrencyCommonBankNotes);
            rtnDto.CurrencyExchangedFromRates = ExchangeRateService.ConvertExchangeRateIntoCreateDtoList(currentDto.CurrencyExchangedFromRates);

            return rtnDto;
        }

        return null;
    }

    public static List<CurrencyCreateDto> ConvertCurrencyIntoCreateDtoList(List<CurrencyDto> currentDtoList)
    {
        if (currentDtoList != null)
        {
            List<CurrencyCreateDto> rtnDto = new List<CurrencyCreateDto>();

            foreach (CurrencyDto currentDto in currentDtoList)
            {
                rtnDto.Add(ConvertCurrencyIntoCreateDto(currentDto));
            }

            return rtnDto;
        }

        return null;
    }
}
